

#include <splash.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>
#include <Adafruit_GFX.h>
#include <gfxfont.h>
#include <Adafruit_SPITFT_Macros.h>
#include <Adafruit_SPITFT.h>

#include <LiquidCrystal_I2C.h>
#include <MLX90393.h>
#include<Wire.h>
 
// MLX90393 I2C Address is 0x0C(12)
#define Addr 0x0C
#define Screen 0x3C
#include <ESP8266WiFi.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiClient.h>
#include <ESP8266mDNS.h>
#include <ESP8266HTTPClient.h>
#include <WiFiManager3.h>
int BAT= A0;              //Analog channel A0 as used to measure battery voltage
float RatioFactor=5.714;  //Resistors Ration Factor
/* function declaration */
int findPercent(int xdata, int ydata, int zdata);

int ie = 1;
int loopthough = 0;

int gasvalue = 0; 
int gasvaluex = 0; 
int gasvaluez = 0; 
int gasvaluey = 0; 
int mylevel = 0;
WiFiServer server(80);
String header;
int webupdate = 1;
int timetoup = 1;
float fahrenheit = 0;
WiFiClient client2; 
//WiFiClientSecure client2;
const int httpPort = 80; 
MLX90393 mlx;
MLX90393::txyz dataq;
LiquidCrystal_I2C lcd(0x3C, 20, 4);
Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);

int service = 0;
#define BTN_PIN 12

/* propane levels table*/

float propaneLevelTable[18][7] = {
  {400, 300, -200, -400, 740, 640, 0},
  {400, 200, 200, 40, 750, 650, 5},
  {500, 390, 500, 400, 650, 500, 10},
  {600, 420, 890, 600, 350, 150, 15},
  {600, 420, 890, 600, 150, 5, 20},
  {700, 520, 800, 520, -280, -400, 25},
  {650, 550, 750, 680, -520, -700, 30},
  {650, 580, 605, 530, -730, -850, 35},
  {630, 550, 395, 150, -850, -990, 40},
  {680, 520, 200, 50, -900, -1209, 45},
  {630, 480, 325, 150, -950, -1220, 50},
  {530, 420, -400, -500, -950, -1050, 55},
  {580, 430, -500, -655, -800, -950, 60},
  {530, 400, -790, -1000, -500, -600, 65},
  {480, 380, -790, -1200, -300, -450, 70},
  {430, 320, -890, -1200, -100, -250, 75},
  {430, 320, -890, -999, 190, 100, 80},
  {390, 300, -800, -659, 400, 500, 85},
};

/*the function to find the propane level*/
int findPercent(int xdata, int ydata, int zdata) {

  /* local variable declaration */
  int result = 0;
  int xHighTable;
  int xLowTable;
  int yHighTable;
  int yLowTable;
  int zHighTable;
  int zLowTable;
  int i = 0;

  for (i = 1; i <= 18; i++) {
    xHighTable = propaneLevelTable[i][0];
    xLowTable = propaneLevelTable[i][1];
    yHighTable = propaneLevelTable[i][2];
    yLowTable = propaneLevelTable[i][3];
    zHighTable = propaneLevelTable[i][4];
    zLowTable = propaneLevelTable[i][5];
    result = propaneLevelTable[i][6];
    if (xdata <= xHighTable && xdata >= xLowTable && ydata <= yHighTable && ydata >= yLowTable && zdata <= zHighTable && zdata >= zLowTable) {
      return result;
      Serial.println(result);
    }
    i++;
  }
  return 0;
  ///not found log data and last propane level %
}
void startLocalServer(String myTemp,String myLevel){

 
WiFiClient client = server.available();   // Listen for incoming clients
if (client) {  

Serial.println("New Client.");          // print a message out in the serial port
String currentLine = "";              // make a String to hold incoming data from the client
while (client.connected()) {            // loop while the client's connected
if (client.available()) {             // if there's bytes to read from the client,
char c = client.read();             // read a byte, then
Serial.write(c);                    // print it out the serial monitor
header += c;
if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
if (currentLine.length() == 0) {
            
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
client.println("HTTP/1.1 200 OK");
client.println("Content-type:text/html");
client.println("Connection: close");
client.println();
if (header.indexOf("GET /1/on") >= 0) {

} 
            // Display the HTML web page
client.println("<!DOCTYPE html><html>");
client.println("<head><meta http-equiv='refresh' content='5' URL='" +  String(int(WiFi.localIP())) + "' ><meta name='viewport' content='width=device-width, initial-scale=1' >");
client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");
client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
client.println(".button2 {background-color: #77878A;}</style></head>");
            
            // Web Page Heading
client.println("<body><h1>My Gas Levels</h1>");
client.println("<p>your temp:" + myTemp + " Fahrenheit");
client.println("<p>Your Propane Level: " + myLevel + "%");
client.println("</body></html>");
client.println();
break;
}else
{ // if you got a newline, then clear currentLine
currentLine = "";
}
}
else if(c != '\r') {  // if you got anything else but a carriage return character,
currentLine += c;      // add it to the end of the currentLine
}
}
}
    // Clear the header variable
header = "";
// Close the connection
client.stop();
Serial.println("Client disconnected.");
Serial.println("");
}

}
void postToServer(String myLevel,String myTemp,String myAccountId){


  HTTPClient http;    //Declare object of class HTTPClient
//http.setInsecure();
String postData = "gasreadlevel=" + myLevel + "&templevel=" + myTemp + "&myaccountid=" + myAccountId;
http.begin("http://gasmeterlevel.com/mymap.php");              //Specify request destination
http.addHeader("Content-Type", "application/x-www-form-urlencoded");    //Specify content-type header              
int httpCode = http.POST(postData);   //Send the request
//String payload = http.getString();    //Get the response payload
http.end(); 
}
void setup() {
   Wire.begin(4, 5);
  Serial.begin(115200);
  pinMode(BTN_PIN, INPUT); 
  static uint8_t lastBtnState = LOW;
  ///tell if button pushed
  Serial.setDebugOutput(true);


 
   WiFiManager wifiManager;
    uint8_t state = digitalRead(BTN_PIN);
  if (state != lastBtnState) {
    
    lastBtnState = state;
    if (state == LOW) {
      Serial.println("Button pressed! enter service mode");
      service = 1;
        display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32
  Serial.println("OLED begun");
 display.display();
  delay(1000);
  display.clearDisplay();
  display.display();
    }else{
  

  wifiManager.autoConnect();
  /*
  delay(3000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Your Connected");
  display.setCursor(0, 8);
  display.print("Your MyGasValve ip:");
  display.setCursor(0, 16);
  display.print(WiFi.localIP());
  display.display(); // actually display all of the above
  Serial.println("Connected.");
  Serial.println(WiFi.localIP());
  delay(3000);
  */
  //Wire.begin();
  
  //Report status from configuration

 }
  }
  delay(100);
  

  byte status = mlx.begin();
       Serial.print("Start status: 0x");
  if(status < 0x10) Serial.print("0"); //Pretty output
  Serial.println(status, BIN);
  mlx.setGainSel(1);
  mlx.setResolution(0, 0, 0); //x, y, z
  mlx.setOverSampling(0);
  mlx.setDigitalFiltering(0);
}


void loop(){
//display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32
mlx.readData(dataq); //Read the values from the sensor

fahrenheit= 1.8*dataq.t+32;
int datax = dataq.x;
int datay = dataq.y;
int dataz = dataq.z;
int myip = WiFi.localIP();

if(service == 1){
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(SSD1306_WHITE);
display.setCursor(0,0);
display.print("Tank level:");
display.setCursor(0,8);
display.print("Tank Temp:" + String(fahrenheit));
display.setCursor(0,16);
display.print(WiFi.localIP());
display.display(); // actually display all of the above
}else{




delay(5000);
display.ssd1306_command(0xAE); // turn off the power to display
delay(500);
ESP.deepSleep(3600e6); //  is sleep for 60 minutes 
}

}
